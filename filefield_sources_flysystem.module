<?php

/**
 * @file
 * Extend FileField to allow files from flysystem sources.
 */

const FILEFIELD_SOURCE_FLYSYSTEM_ATTACH_DEFAULT_PATH = 'file_attach';
const FILEFIELD_SOURCE_FLYSYSTEM_ATTACH_MODE_MOVE = 'move';
const FILEFIELD_SOURCE_FLYSYSTEM_ATTACH_MODE_COPY = 'copy';
const FILEFIELD_SOURCE_FLYSYSTEM_ATTACH_MODE_SERVEFROMFOLDER = 'servefromattach';
const FILEFIELD_SOURCE_FLYSYSTEM_SCHEME = '';


/**
 * Save a file into the database after validating it.
 *
 * This function is identical to the core function file_save_upload() except
 * that it accepts an input file path instead of an input file source name.
 *
 * @see file_save_upload()
 */
function filefield_sources_flysystem_save_file_servefromattach($filepath, $validators = array(), $destination = FALSE, $replace = FILE_EXISTS_RENAME) {
  $user = \Drupal::currentUser();

  // Begin building file object.
  $file = entity_create('file', array(
    'uri' => $filepath,
    'uid' => $user->id(),
    'status' => FILE_EXISTS_RENAME,
  ));
  $file->setFilename(trim(basename($filepath), '.'));
  $file->setMimeType(\Drupal::service('file.mime_type.guesser')->guess($file->getFilename()));
  $file->setSize(filesize($filepath));

  $extensions = '';
  if (isset($validators['file_validate_extensions'])) {
    if (isset($validators['file_validate_extensions'][0])) {
      // Build the list of non-munged extensions if the caller provided them.
      $extensions = $validators['file_validate_extensions'][0];
    }
    else {
      // If 'file_validate_extensions' is set and the list is empty then the
      // caller wants to allow any extension. In this case we have to remove the
      // validator or else it will reject all extensions.
      unset($validators['file_validate_extensions']);
    }
  }
  else {
    // No validator was provided, so add one using the default list.
    // Build a default non-munged safe list for file_munge_filename().
    $extensions = 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp';
    $validators['file_validate_extensions'] = array();
    $validators['file_validate_extensions'][0] = $extensions;
  }

  if (!empty($extensions)) {
    // Munge the filename to protect against possible malicious extension hiding
    // within an unknown file type (ie: filename.html.foo).
    $file->setFilename(file_munge_filename($file->getFilename(), $extensions));
  }

  // Rename potentially executable files, to help prevent exploits (i.e. will
  // rename filename.php.foo and filename.php to filename.php.foo.txt and
  // filename.php.txt, respectively). Don't rename if 'allow_insecure_uploads'
  // evaluates to TRUE.
  if (!\Drupal::config('system.file')->get('allow_insecure_uploads') && preg_match('/\.(php|pl|py|cgi|asp|js)(\.|$)/i', $file->getFilename()) && (substr($file->getFilename(), -4) != '.txt')) {
    $file->setMimeType('text/plain');
    $file->setFileUri($file->getFileUri() . '.txt');
    $file->setFilename($file->getFilename() . '.txt');
    // The .txt extension may not be in the allowed list of extensions. We have
    // to add it here or else the file upload will fail.
    if (!empty($extensions)) {
      $validators['file_validate_extensions'][0] .= ' txt';
      drupal_set_message(t('For security reasons, your upload has been renamed to %filename.', array('%filename' => $file->getFilename())));
    }
  }

  // Add in our check of the the file name length.
  $validators['file_validate_name_length'] = array();

  // Call the validation functions specified by this function's caller.
  $errors = file_validate($file, $validators);

  // Check for errors.
  if (!empty($errors)) {
    $message = t('The specified file %name could not be uploaded.', array('%name' => $file->getFilename()));
    if (count($errors) > 1) {
      $message .= theme('item_list', array('items' => $errors));
    }
    else {
      $message .= ' ' . array_pop($errors);
    }
    drupal_set_message($message, 'error');
    return FALSE;
  }

  // If we made it this far it's safe to record this file in the database.
  $file->save();
  return $file;
}

